(* This grammar is only valid for _tokens_, not _the raw code_ (i.e. it ignores whitespace, etc.) *)
(* Any CAPITALIZED variable is a special token *)

program = { topstmt };
(* { something } can be repeated zero times *)
block = { stmt };

topstmt = stmt | 
		DECLARE, identifier, COLON, type |
		CONSTANT, identifier, =, expr
		PROCEDURE, identifier, [ LEFT_PAR, paramlist, RIGHT_PAR ], block, ENDPROCEDURE |
		FUNCTION, identifier [ LEFT_PAR, paramlist, RIGHT_PAR ], RETURNS, type, block, ENDFUNCTION
;
stmt = 	lvalue, ASSIGN, expr |
		INPUT, lvalue |
		OUTPUT, exprlist |
		IF, expr, THEN, block, [ ELSE, block ], ENDIF |
		CASE, OF, lvalue, { expr, COLON, block }, [ OTHERWISE, block ], ENDCASE |
		FOR, identifier, ASSIGN, expr, TO, expr, [ STEP, expr ], block, NEXT
		REPEAT, block, UNTIL, expr |
		WHILE, expr, DO, block, ENDWHILE | 
		CALL, identifier, [ LEFT_PAR, paramlist, RIGHT_PAR ]
;

exprlist = { expr, COMMA }, expr;
paramlist = [ { param, COMMA }, param ];
param = [ BYREF ], identifier, COLON, type;

(* top level expr *)
expr = bin_expr0;

(* binary expr <precedence level> *)
bin_expr0 = bin_expr1 [ OR bin_expr0 ];
bin_expr1 = bin_expr2 [ AND bin_expr1 ];
bin_expr2 = bin_expr3 [  EQ | GT | LT | GT_EQ | LT_EQ | LT_GT ) bin_expr2 ];
bin_expr3 = bin_expr4 [ ( PLUS | MINUS ) bin_expr3 ];
bin_expr4 = unary_expr [ ( STAR | SLASH | MOD | DIV ) bin_expr4 ];

unary_expr = ( NOT | MINUS ) unary_expr |
			primary;
primary = REAL_C | INT_C | STR_C | DATE_C | TRUE | FALSE | 
		identifier LEFT_PAR [ exprlist ] RIGHT_PAR | (* calling a function *)
		lvalue |
		LEFT_PAR expr RIGHT_PAR;

                    (* array access *)
lvalue = identifier { LEFT_SQ expr RIGHT_SQ };

type = [ ARRAY LEFT_SQ expr COLON expr RIGHT_SQ ] (INTEGER | REAL | CHAR | STRING | BOOLEAN | DATE);
identifier = ? IDENTIFIER ?;
